  //  console.dir({ primaryNode }, { depth: null });
  // tokens.forEach((t,i) => {
  //   console.dir(i)
  //   console.dir(t)
  // })

fun fib(n) {
  if (n <= 1) return n;
  return fib(n - 2) + fib(n - 1);
}

// THIS is not working for some reason
for (var i = 0; i < 20; i = i + 1) {
  print i;
}

// something seems wrong with my conditions;
fun fib(n) {
  print n;
  if (n <= 1) {
    return n;
  }

  return fib(n - 2) + fib(n - 1);
}

print fib(20);

Works


------
For loops work


But for this

...I'm getting this result. AND the reason is that my value for n is getting polluted. That is, in the last line, the first call to fib is getting run and returned, BUT when it gets to the second call fib, it's the SAME env...that is, the first time fib(n-1) is called, n is 0! when it should be 20


fun fib(n) {
  print n;
  if (n <= 1) {
    return n;
  }

  return fib(n - 2) + fib(n - 1);
}

fib(20);
20
18
16
...
-1
-2
...
-10
  print n;
  print n;


-----

Also this should throw an error
      fun scopeTest(num) {
        print num;
        var num = 7;
        print num;
      }
      scopeTest(5);

------

fun fib(n) {
  print n;
  if (n <= 1) {
    return n;
  }

  return fib(n - 2) + fib(n - 1);
}

print fib(4);



fun makeCounter() {
  var i = 0;
  fun count() {
    i  = i + 1;
    print i;
  }

  return count;
}

var counter = makeCounter();
counter();
counter();
----
Works:


fun test() {
  var thing = "yo";
  fun inside() {
    print thing;
  }
  inside();
}

test();

-----
Also works

fun test() {
  var thing = "yo";
  fun inside() {
    print thing;
  }
  inside();
}

var result = test;
result();


-----

Also works


var fish = 1;

fun test() {
  fun inside() {
    print fish + 3;
  }
  inside();
}

var result = test;
result();

-----

Also works

fun test() {
  var fish = 1;
  fun inside() {
    print fish + 3;
  }
  inside();
}

var result = test;
result();


------

Also works

fun test() {
  var fish = 1;
  fun inside() {
    var wonk = fish + 4;
    print wonk;
  }
  inside();
}

var result = test;
result();

-----

Does NOT work. 


fun test() {
  var fish = 1;
  fun inside() {
    var wonk = fish + 4;
    print wonk;
  }
  return inside;
}

var result = test();
result();


-----

works


fun test() {
  fun inside() {
    var fish = 1;
    print fish;
  }
  return inside;
}

var result = test();
result();

Does not work


fun test() {
  var fish = 1;
  fun inside() {
    print fish;
  }
  return inside;
}

var result = test();
result();

THESE TWO LAST ONES ARE THE KEY. 
There's something wrong with the env when declaring
a new function in a function

Part of the problem is that fish won't be in the env until 
evaluate is called on inside, which only happens when `call` happens
